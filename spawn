#!/usr/bin/env python
from subprocess import call,PIPE
from collections import defaultdict
import os,sys,time,json


def init(args): 
    try:
        if '-c' in args:
            open('./.spawn','w').write('{"name":"./%s","port":"%s","command":"%s"}'%(args['-f'],args['-p'],args['-c']))
        else:
            open('./.spawn','w').write('{"name":"./%s","port":"%s"}'%(args['-f'],args['-p']))
    except KeyError:
        print 'invalid arguments for init\nuse: spawn init -f <filename> -p <port> [-c <command>]'

def start(args):
    try:
        os.chdir(args['-d'])
    except KeyError: pass
    try:
        config = json.loads(open('./.spawn','r').read())
        print 'starting spawn process...'
        c = call('spawn-fcgi  -f %s -p %s'%(config['name'],config['port']),shell=True,stdout=PIPE,stderr=PIPE)
        if  "command" in config: call(config['command'],shell=True)
        if not c: print "ok"
        else: print "error: %s"%c
    except IOError: print 'run spawn init first'
    except ValueError: print "error in config file"

def stop(args):
    try: os.chdir(args['-d'])
    except KeyError: pass
    try:
        print 'stopping spawn process...'
        config = json.loads(open('./.spawn','r').read())
        call('pgrep -f "%s" | xargs kill'%config['name'],shell=True,stdout=PIPE,stderr=PIPE)
        print "ok"
    except IOError: print 'run "spawn init" first'

def status(args):
    print 'current spawn config:'
    config = json.loads(open('./.spawn','r').read())
    print 'script name: %s\nport: %s'%(config['name'], config['port'])
    if 'command' in config:
        print 'on start:',config['command']

def restart(args):
    stop(args)
    time.sleep(1)
    start(args)

def purge(args):
    print 'removing spawn config'
    try:
        os.remove('.spawn')
    except OSError: print 'unable to remove config file'
    print "ok"

def error(args): print 'unknown command\nuse spawn init|start|stop|restart'

if __name__ == '__main__':
    commands = defaultdict(error, { 'init': init, 'start': start, 'stop': stop, 'status': status, 'restart': restart, 'purge': purge })
    args = dict(zip(sys.argv[0::2],sys.argv[1::2]))
    cmd = args.values()[0]
    commands[cmd](args)
