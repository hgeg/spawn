#!/usr/bin/env python
from subprocess import call,PIPE
from collections import defaultdict
import os,sys,time,json

def init(args): 
    try:
        config = open('./.spawn','w')
        data = {"name":args['-f'],"port":args['-p'],"onstart":None,"onstop":None}
        if '--onstart' in args:
            data.update(onstart=args["--onstart"])
        if '--onstop' in args:
            data.update(onstop=args["--onstop"])
        config.write(json.dumps(data))
        print 'ok'
    except KeyError:
        print 'invalid arguments for init\nuse: spawn init -f <filename> -p <port> [--onstart <command>] [--onstop <command>]'

def start(args):
    try: os.chdir(args['-d'])
    except KeyError: pass
    try:
        config = json.loads(open('./.spawn','r').read())
        print 'starting spawn process...'
        if "onstart" in config: call(config['onstart'],shell=True)
        c = call('spawn-fcgi  -f %s -p %s'%(config['name'],config['port']),shell=True,stdout=PIPE,stderr=PIPE)
        if not c: print "ok"
        else: print "error: %s"%c
    except IOError: print 'run spawn init first'
    except ValueError: print "error in config file"

def stop(args):
    try: os.chdir(args['-d'])
    except KeyError: pass
    try:
        config = json.loads(open('./.spawn','r').read())
        print 'stopping spawn process...'
        if "onstop" in config: call(config['onstop'],shell=True)
        c = call('pgrep -f "%s" | xargs kill'%config['name'],shell=True,stdout=PIPE,stderr=PIPE)
        if not c: print "ok"
        else: print "error: %s"%c
    except IOError: print 'run "spawn init" first'

def status(args):
    try:
        config = json.loads(open('./.spawn','r').read())
        print 'current spawn config:'
        print 'spawn executable: %s\nport: %s'%(config['name'], config['port'])
        if  'onstart' in config:
            print 'on start command: "%s"'%config['onstart']
        if  'onstart' in config:
            print 'on stop command: "%s"'%config['onstop']
    except IOError: print 'run "spawn init" first'

def restart(args):
    stop(args)
    time.sleep(1)
    start(args)

def purge(args=None):
    print 'removing spawn config...'
    try:
        os.remove('.spawn')
        print "ok"
    except OSError: print 'unable to remove config file'

def error(args=None): print 'unknown command!\nuse spawn init|start|stop|restart|status|purge'

if __name__ == '__main__':
    try:
        commands = defaultdict(error, { 'init': init, 'start': start, 'stop': stop, 'status': status, 'restart': restart, 'purge': purge })
        args = dict(zip(sys.argv[0::2],sys.argv[1::2]))
        cmd = args.values()[0]
        commands[cmd](args)
    except: error()
